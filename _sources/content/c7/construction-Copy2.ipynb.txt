{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  30,   80,  130],\n",
       "       [  80,  255,  430],\n",
       "       [ 130,  430,  730],\n",
       "       [ 180,  605, 1030]])"
      ]
     },
     "execution_count": 225,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "R = 4; h = 3; N = 5\n",
    "W = np.arange(R*h).reshape(R, h)\n",
    "Z = np.arange(h*N).reshape(h, N)\n",
    "H = np.arange(R*N).reshape(R, N)\n",
    "np.tensordot(H, Z, (1,1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Import numpy and visualization packages\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn import datasets\n",
    "\n",
    "# import data\n",
    "boston = datasets.load_boston()\n",
    "X_boston = boston['data']\n",
    "X_boston = (X_boston - X_boston.mean(0))/(X_boston.std(0))\n",
    "y_boston = boston['target']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- limited options for f1 and f2 \n",
    "- only one HL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Activation Functions \n",
    "def ReLU(h):\n",
    "    return np.maximum(h, 0)\n",
    "\n",
    "def sigmoid(h):\n",
    "    return 1/(1 + np.exp(-h))\n",
    "    \n",
    "def linear(h):\n",
    "    return h\n",
    "\n",
    "activation_function_dict = {'ReLU':ReLU, 'sigmoid':sigmoid, 'linear':linear}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [],
   "source": [
    "class FeedForwardNeuralNetwork:\n",
    "    \n",
    "    def _forward_pass(self, Xt):\n",
    "        self.H1 = (self.W1 @ Xt) + self.c1\n",
    "        self.Z1 = activation_function_dict[self.f1](self.H1)\n",
    "        self.H2 = (self.W2 @ self.Z1) + self.c2\n",
    "        self.Yhat = activation_function_dict[self.f2](self.H2)\n",
    "\n",
    "    \n",
    "    def fit(self, X, Y, n_hidden, f1 = 'ReLU', f2 = 'linear', loss = 'RSS', lr = 1e-5, n_iter = 5e3, seed = None):\n",
    "        \n",
    "        ## Store Information\n",
    "        self.X = X\n",
    "        self.Y = Y.reshape(len(Y), -1)\n",
    "        self.N = len(X)\n",
    "        self.D_X = self.X.shape[1]\n",
    "        self.D_Y = self.Y.shape[1]\n",
    "        self.Xt = self.X.T\n",
    "        self.Yt = self.Y.T\n",
    "        self.D_h = n_hidden\n",
    "        self.f1, self.f2 = f1, f2\n",
    "        self.loss = loss\n",
    "        self.lr = lr\n",
    "        self.n_iter = int(n_iter)\n",
    "        self.seed = seed\n",
    "        \n",
    "        ## Instantiate Weights\n",
    "        np.random.seed(self.seed)\n",
    "        self.W1 = np.random.randn(self.D_h, self.D_X)/5\n",
    "        self.c1 = np.random.randn(self.D_h, 1)/5\n",
    "        self.W2 = np.random.randn(self.D_Y, self.D_h)/5\n",
    "        self.c2 = np.random.randn(self.D_Y, 1)/5\n",
    "        \n",
    "        ## Instantiate Outputs\n",
    "        self._forward_pass(self.Xt)\n",
    "        \n",
    "        ## Fit Weights\n",
    "        for iteration in range(self.n_iter):\n",
    "            \n",
    "            # Yhat #\n",
    "            # TODO: this assumes RSS\n",
    "            self.dL_dYhat = -(self.Yt - self.Yhat) # (D_Y x N)\n",
    "            \n",
    "            # H2 #\n",
    "            # TODO: this assumes linear activation \n",
    "            self.dYhat_dH2 = np.ones((self.D_Y, self.N)) # (D_Y x N)\n",
    "            self.dL_dH2 = self.dL_dYhat * self.dYhat_dH2 # (D_Y x N)\n",
    "\n",
    "            # c2 # \n",
    "            self.dL_dc2 = np.sum(self.dL_dH2, 1) # (D_y)\n",
    "            \n",
    "            # W2 # \n",
    "            self.dL_dW2 = np.tensordot(self.dL_dH2, self.Z1, (1,1)) # (D_Y x D_h)\n",
    "            \n",
    "            # Z1 #\n",
    "            self.dL_dZ1 = np.tensordot(self.W2, self.dL_dH2, (0, 0)) # (D_h x N)\n",
    "            \n",
    "            # H1 #\n",
    "            # TODO: this assumes ReLU\n",
    "            self.dL_dH1 = self.dL_dZ1 * np.maximum(self.H1, 0) # (D_h x N)\n",
    "            \n",
    "            # c1 #\n",
    "            self.dL_dc1 = np.sum(self.dL_dH1, 1) # (D_h)\n",
    "            \n",
    "            # W1 # \n",
    "            self.dL_dW1 = np.tensordot(self.dL_dH1, self.Xt, (1,1)) # (D_h, D_X)\n",
    "            \n",
    "            ## Update Weights\n",
    "            self.W1 -= self.lr * self.dL_dW1\n",
    "            self.c1 -= self.lr * self.dL_dc1.reshape(-1, 1)           \n",
    "            self.W2 -= self.lr * self.dL_dW2            \n",
    "            self.c2 -= self.lr * self.dL_dc2.reshape(-1, 1)                    \n",
    "            \n",
    "            ## Update Outputs\n",
    "            self._forward_pass(self.Xt)\n",
    "                        \n",
    "    def predict(self, X_test):\n",
    "        X_testt = X_test.T\n",
    "        self.h1 = (self.W1 @ X_testt) + self.c1\n",
    "        self.z1 = activation_function_dict[self.f1](self.h1)\n",
    "        self.h2 = (self.W2 @ self.z1) + self.c2\n",
    "        self.yhat = activation_function_dict[self.f2](self.h2)        \n",
    "        return self.yhat\n",
    "    \n",
    "ffnn = FeedForwardNeuralNetwork()\n",
    "ffnn.fit(X_boston, y_boston, n_hidden = 8, seed = 123)\n",
    "yhat_boston = ffnn.predict(X_boston)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7ffcd39c95d0>"
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.scatterplot(y_boston, yhat_boston[0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4955.523387034045"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum( (y_boston - yhat_boston[0])**2 )"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
