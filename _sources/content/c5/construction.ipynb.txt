{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Construction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "tips = sns.load_dataset('tips')\n",
    "X = np.array(tips.drop(columns = 'tip'))\n",
    "y = np.array(tips['tip'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note: by default string is treated as categorical and integer/float as quantitative. Add option to change this? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "class RegressionTree:\n",
    "\n",
    "        \n",
    "    def fit(self, X, y):\n",
    "        self.N, self.D = X.shape\n",
    "        self.dtypes = [np.array(list(X[:,d])).dtype for d in range(self.D)]\n",
    "        self.X = X\n",
    "        self.y = y\n",
    "        \n",
    "        \n",
    "    def make_split(self, Xsub, ysub):\n",
    "        \n",
    "        self.best_d = 0\n",
    "        self.best_v = np.nan\n",
    "        self.best_rss = np.inf\n",
    "        \n",
    "        for d in range(self.D):\n",
    "            \n",
    "            Xsub_d = Xsub[:,d]\n",
    "            \n",
    "            ## Quantitative Predictors\n",
    "            if (self.dtypes[d] == float) or (self.dtypes[d] == int): \n",
    "                Xsub_d_unique = np.unique(Xsub_d) \n",
    "                for v in Xsub_d_unique[:-1]:\n",
    "                    Xsub_d_less = ysub[Xsub_d <= v]\n",
    "                    Xsub_d_greater = ysub[Xsub_d > v]\n",
    "                    rss = self.rss(Xsub_d_less, Xsub_d_greater)\n",
    "                    if rss < self.best_rss:\n",
    "                        self.best_d = d\n",
    "                        self.best_v = v\n",
    "                        self.best_rss = rss\n",
    "                        \n",
    "            ## Categorical Predictors\n",
    "            else: \n",
    "                ordered_categories = self.sort_by_outcome(Xsub_d, ysub)\n",
    "    \n",
    "        def rss(self, a, b):\n",
    "            return np.sum((a - np.mean(a))**2) + np.sum((b - np.mean(b))**2)\n",
    "\n",
    "        def sort_by_outcome(self, Xsub_d, ysub):\n",
    "            Xsub_d = Xsub[:,d]\n",
    "            categories = np.unique(Xsub_d)\n",
    "            rss_by_category = np.empty(len(categories))\n",
    "            SoRTit\n",
    "            return ordered_categories\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree = RegressionTree()\n",
    "tree.fit(X, y)\n",
    "tree.make_split(X, y)\n",
    "tree.best_d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 3, 2])"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.argsort([1,0,5,2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 2, 5])"
      ]
     },
     "execution_count": 158,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.array([1,0,5,2])[np.argsort([1,0,5,2])]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
