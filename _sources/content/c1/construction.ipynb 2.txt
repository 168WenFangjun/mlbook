{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Construction\n",
    "\n",
    "$$\n",
    "\\newcommand{\\sumN}{\\sum_{n = 1}^N} \n",
    "\\newcommand{\\sumn}{\\sum_n} \n",
    "\\newcommand{\\bx}{\\mathbf{x}} \n",
    "\\newcommand{\\bbeta}{\\boldsymbol{\\beta}} \n",
    "\\newcommand{\\btheta}{\\boldsymbol{\\theta}} \n",
    "\\newcommand{\\bbetahat}{\\boldsymbol{\\hat{\\beta}}} \n",
    "\\newcommand{\\bthetahat}{\\boldsymbol{\\hat{\\theta}}} \n",
    "\\newcommand{\\dadb}[2]{\\frac{\\partial #1}{\\partial #2}} \n",
    "\\newcommand{\\by}{\\mathbf{y}} \n",
    "\\newcommand{\\bX}{\\mathbf{X}}\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This section demonstrates how to construct a linear regression model using only `numpy`. To do this, we generate a class named `LinearRegression`. We use this class to train the model and make future predictions. \n",
    "\n",
    "The first method in the `LinearRegression` class is `fit`, which takes care of estimating the $\\bbeta$ parameters. This simply consists of calculating \n",
    "\n",
    "$$\n",
    "\\bbetahat = \\left(\\bX^\\top \\bX\\right)^{-1}\\bX^\\top \\by\n",
    "$$\n",
    "\n",
    "The `fit` method also makes in sample predictions with $\\hat{\\by} = \\bX \\bbetahat$ and calculates the training loss with \n",
    "\n",
    "$$\n",
    "\\mathcal{L}(\\bbetahat) = \\frac{1}{2}\\sumN \\left(y_n - \\hat{y}_n \\right)^2.\n",
    "$$\n",
    "\n",
    "The second method is `predict` which forms out-of-sample predictions. Given test set of predictors $\\bX'$, we can form fitted values with $\\hat{\\by}' = \\bX' \\bbetahat$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from scipy import stats as ss\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "ax.set_xlabel(xlabel = r'$x$', size = 15)\n",
    "ax.set_ylabel(r'$f(x)$', size = 15)\n",
    "ax.set_title(r'PDF of $X\\sim \\mathcal{N}(5, 1)$', size = 16)\n",
    "x = np.arange(0, 10, .1)\n",
    "y = ss.norm.pdf(x, loc = 5)\n",
    "sns.lineplot(x, y)\n",
    "sns.despine()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "class LinearRegression:\n",
    "\n",
    "    def fit(self, X, y, intercept = False):\n",
    "\n",
    "        # record data and dimensions\n",
    "        if intercept == False: # add intercept (if not already included)\n",
    "            ones = np.ones(len(X)).reshape(len(X), 1) # column of ones \n",
    "            X = np.concatenate((ones, X), axis = 1)\n",
    "        self.X = np.array(X)\n",
    "        self.y = np.array(y)\n",
    "        self.N, self.D = self.X.shape\n",
    "        \n",
    "        # estimate parameters\n",
    "        XtX = np.dot(self.X.T, self.X)\n",
    "        XtX_inverse = np.linalg.inv(XtX)\n",
    "        Xty = np.dot(self.X.T, self.y)\n",
    "        self.beta_hats = np.dot(XtX_inverse, Xty)\n",
    "        \n",
    "        # make in-sample predictions\n",
    "        self.y_hat = np.dot(self.X, self.beta_hats)\n",
    "        \n",
    "        # calculate loss\n",
    "        self.L = .5*np.sum((self.y - self.y_hat)**2)\n",
    "        \n",
    "    def predict(self, X_test, intercept = True):\n",
    "        \n",
    "        # form predictions\n",
    "        self.y_test_hat = np.dot(X_test, self.beta_hats)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's try out our `LinearRegression` class with some data. Here we use the {doc}`Boston housing </content/appendix/data>` dataset from `sklearn.datasets`. The target variable in this dataset is median neighborhood home value. The predictors are all continuous and represent factors possibly related to the median home value, such as average rooms per house. Hit \"Click to show\" to see the code that loads this data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "boston = datasets.load_boston()\n",
    "X = boston['data']\n",
    "y = boston['target']\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With the class built and the data loaded, we are ready to run or regression model. This is as simple as instantiating the model and applying `fit`, as shown below. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "model = LinearRegression() # instantiate model\n",
    "model.fit(X, y, intercept = False) # fit model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's then see how well our fitted values model the true target values. The closer the points lie to the 45-degree line, the more accurate the fit. The model seems to do reasonably well; our predictions definitely follow the true values quite well, although we would like the fit to be a bit tighter. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "```{note}\n",
    "Note the handful of observations with $y = 50$ exactly. This is due to censorship in the data collection process. It appears neighborhoods with average home values above \\$50,000 were assigned a value of 50 even.\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "tags": [
     "hide-input"
    ]
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "sns.scatterplot(model.y, model.y_hat)\n",
    "ax.set_xlabel(r'$y$', size = 16)\n",
    "ax.set_ylabel(r'$\\hat{y}$', rotation = 0, size = 16, labelpad = 15)\n",
    "ax.set_title(r'$y$ vs. $\\hat{y}$', size = 20, pad = 10)\n",
    "sns.despine()"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Edit Metadata",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
